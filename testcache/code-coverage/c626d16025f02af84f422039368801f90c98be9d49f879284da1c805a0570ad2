a:5:{s:9:"classesIn";a:0:{}s:8:"traitsIn";a:0:{}s:11:"functionsIn";a:197:{s:35:"PHPUnit\Framework\assertArrayHasKey";a:7:{s:4:"name";s:17:"assertArrayHasKey";s:14:"namespacedName";s:35:"PHPUnit\Framework\assertArrayHasKey";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:54:"assertArrayHasKey($key, $array, string $message): void";s:9:"startLine";i:89;s:7:"endLine";i:92;s:3:"ccn";i:1;}s:38:"PHPUnit\Framework\assertArrayNotHasKey";a:7:{s:4:"name";s:20:"assertArrayNotHasKey";s:14:"namespacedName";s:38:"PHPUnit\Framework\assertArrayNotHasKey";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:57:"assertArrayNotHasKey($key, $array, string $message): void";s:9:"startLine";i:110;s:7:"endLine";i:113;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\assertContains";a:7:{s:4:"name";s:14:"assertContains";s:14:"namespacedName";s:32:"PHPUnit\Framework\assertContains";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:66:"assertContains($needle, iterable $haystack, string $message): void";s:9:"startLine";i:128;s:7:"endLine";i:131;s:3:"ccn";i:1;}s:38:"PHPUnit\Framework\assertContainsEquals";a:7:{s:4:"name";s:20:"assertContainsEquals";s:14:"namespacedName";s:38:"PHPUnit\Framework\assertContainsEquals";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:72:"assertContainsEquals($needle, iterable $haystack, string $message): void";s:9:"startLine";i:135;s:7:"endLine";i:138;s:3:"ccn";i:1;}s:35:"PHPUnit\Framework\assertNotContains";a:7:{s:4:"name";s:17:"assertNotContains";s:14:"namespacedName";s:35:"PHPUnit\Framework\assertNotContains";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:69:"assertNotContains($needle, iterable $haystack, string $message): void";s:9:"startLine";i:153;s:7:"endLine";i:156;s:3:"ccn";i:1;}s:41:"PHPUnit\Framework\assertNotContainsEquals";a:7:{s:4:"name";s:23:"assertNotContainsEquals";s:14:"namespacedName";s:41:"PHPUnit\Framework\assertNotContainsEquals";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:75:"assertNotContainsEquals($needle, iterable $haystack, string $message): void";s:9:"startLine";i:160;s:7:"endLine";i:163;s:3:"ccn";i:1;}s:36:"PHPUnit\Framework\assertContainsOnly";a:7:{s:4:"name";s:18:"assertContainsOnly";s:14:"namespacedName";s:36:"PHPUnit\Framework\assertContainsOnly";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:96:"assertContainsOnly(string $type, iterable $haystack, ?bool $isNativeType, string $message): void";s:9:"startLine";i:177;s:7:"endLine";i:180;s:3:"ccn";i:1;}s:47:"PHPUnit\Framework\assertContainsOnlyInstancesOf";a:7:{s:4:"name";s:29:"assertContainsOnlyInstancesOf";s:14:"namespacedName";s:47:"PHPUnit\Framework\assertContainsOnlyInstancesOf";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:91:"assertContainsOnlyInstancesOf(string $className, iterable $haystack, string $message): void";s:9:"startLine";i:194;s:7:"endLine";i:197;s:3:"ccn";i:1;}s:39:"PHPUnit\Framework\assertNotContainsOnly";a:7:{s:4:"name";s:21:"assertNotContainsOnly";s:14:"namespacedName";s:39:"PHPUnit\Framework\assertNotContainsOnly";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:99:"assertNotContainsOnly(string $type, iterable $haystack, ?bool $isNativeType, string $message): void";s:9:"startLine";i:211;s:7:"endLine";i:214;s:3:"ccn";i:1;}s:29:"PHPUnit\Framework\assertCount";a:7:{s:4:"name";s:11:"assertCount";s:14:"namespacedName";s:29:"PHPUnit\Framework\assertCount";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:65:"assertCount(int $expectedCount, $haystack, string $message): void";s:9:"startLine";i:231;s:7:"endLine";i:234;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\assertNotCount";a:7:{s:4:"name";s:14:"assertNotCount";s:14:"namespacedName";s:32:"PHPUnit\Framework\assertNotCount";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:68:"assertNotCount(int $expectedCount, $haystack, string $message): void";s:9:"startLine";i:251;s:7:"endLine";i:254;s:3:"ccn";i:1;}s:30:"PHPUnit\Framework\assertEquals";a:7:{s:4:"name";s:12:"assertEquals";s:14:"namespacedName";s:30:"PHPUnit\Framework\assertEquals";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:55:"assertEquals($expected, $actual, string $message): void";s:9:"startLine";i:268;s:7:"endLine";i:271;s:3:"ccn";i:1;}s:44:"PHPUnit\Framework\assertEqualsCanonicalizing";a:7:{s:4:"name";s:26:"assertEqualsCanonicalizing";s:14:"namespacedName";s:44:"PHPUnit\Framework\assertEqualsCanonicalizing";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:69:"assertEqualsCanonicalizing($expected, $actual, string $message): void";s:9:"startLine";i:285;s:7:"endLine";i:288;s:3:"ccn";i:1;}s:42:"PHPUnit\Framework\assertEqualsIgnoringCase";a:7:{s:4:"name";s:24:"assertEqualsIgnoringCase";s:14:"namespacedName";s:42:"PHPUnit\Framework\assertEqualsIgnoringCase";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:67:"assertEqualsIgnoringCase($expected, $actual, string $message): void";s:9:"startLine";i:302;s:7:"endLine";i:305;s:3:"ccn";i:1;}s:39:"PHPUnit\Framework\assertEqualsWithDelta";a:7:{s:4:"name";s:21:"assertEqualsWithDelta";s:14:"namespacedName";s:39:"PHPUnit\Framework\assertEqualsWithDelta";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:78:"assertEqualsWithDelta($expected, $actual, float $delta, string $message): void";s:9:"startLine";i:319;s:7:"endLine";i:322;s:3:"ccn";i:1;}s:33:"PHPUnit\Framework\assertNotEquals";a:7:{s:4:"name";s:15:"assertNotEquals";s:14:"namespacedName";s:33:"PHPUnit\Framework\assertNotEquals";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:58:"assertNotEquals($expected, $actual, string $message): void";s:9:"startLine";i:336;s:7:"endLine";i:339;s:3:"ccn";i:1;}s:47:"PHPUnit\Framework\assertNotEqualsCanonicalizing";a:7:{s:4:"name";s:29:"assertNotEqualsCanonicalizing";s:14:"namespacedName";s:47:"PHPUnit\Framework\assertNotEqualsCanonicalizing";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:72:"assertNotEqualsCanonicalizing($expected, $actual, string $message): void";s:9:"startLine";i:353;s:7:"endLine";i:356;s:3:"ccn";i:1;}s:45:"PHPUnit\Framework\assertNotEqualsIgnoringCase";a:7:{s:4:"name";s:27:"assertNotEqualsIgnoringCase";s:14:"namespacedName";s:45:"PHPUnit\Framework\assertNotEqualsIgnoringCase";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:70:"assertNotEqualsIgnoringCase($expected, $actual, string $message): void";s:9:"startLine";i:370;s:7:"endLine";i:373;s:3:"ccn";i:1;}s:42:"PHPUnit\Framework\assertNotEqualsWithDelta";a:7:{s:4:"name";s:24:"assertNotEqualsWithDelta";s:14:"namespacedName";s:42:"PHPUnit\Framework\assertNotEqualsWithDelta";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:81:"assertNotEqualsWithDelta($expected, $actual, float $delta, string $message): void";s:9:"startLine";i:387;s:7:"endLine";i:390;s:3:"ccn";i:1;}s:36:"PHPUnit\Framework\assertObjectEquals";a:7:{s:4:"name";s:18:"assertObjectEquals";s:14:"namespacedName";s:36:"PHPUnit\Framework\assertObjectEquals";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:91:"assertObjectEquals(object $expected, object $actual, string $method, string $message): void";s:9:"startLine";i:401;s:7:"endLine";i:404;s:3:"ccn";i:1;}s:29:"PHPUnit\Framework\assertEmpty";a:7:{s:4:"name";s:11:"assertEmpty";s:14:"namespacedName";s:29:"PHPUnit\Framework\assertEmpty";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:43:"assertEmpty($actual, string $message): void";s:9:"startLine";i:420;s:7:"endLine";i:423;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\assertNotEmpty";a:7:{s:4:"name";s:14:"assertNotEmpty";s:14:"namespacedName";s:32:"PHPUnit\Framework\assertNotEmpty";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:46:"assertNotEmpty($actual, string $message): void";s:9:"startLine";i:439;s:7:"endLine";i:442;s:3:"ccn";i:1;}s:35:"PHPUnit\Framework\assertGreaterThan";a:7:{s:4:"name";s:17:"assertGreaterThan";s:14:"namespacedName";s:35:"PHPUnit\Framework\assertGreaterThan";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:60:"assertGreaterThan($expected, $actual, string $message): void";s:9:"startLine";i:456;s:7:"endLine";i:459;s:3:"ccn";i:1;}s:42:"PHPUnit\Framework\assertGreaterThanOrEqual";a:7:{s:4:"name";s:24:"assertGreaterThanOrEqual";s:14:"namespacedName";s:42:"PHPUnit\Framework\assertGreaterThanOrEqual";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:67:"assertGreaterThanOrEqual($expected, $actual, string $message): void";s:9:"startLine";i:473;s:7:"endLine";i:476;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\assertLessThan";a:7:{s:4:"name";s:14:"assertLessThan";s:14:"namespacedName";s:32:"PHPUnit\Framework\assertLessThan";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:57:"assertLessThan($expected, $actual, string $message): void";s:9:"startLine";i:490;s:7:"endLine";i:493;s:3:"ccn";i:1;}s:39:"PHPUnit\Framework\assertLessThanOrEqual";a:7:{s:4:"name";s:21:"assertLessThanOrEqual";s:14:"namespacedName";s:39:"PHPUnit\Framework\assertLessThanOrEqual";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:64:"assertLessThanOrEqual($expected, $actual, string $message): void";s:9:"startLine";i:507;s:7:"endLine";i:510;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\assertFileEquals";a:7:{s:4:"name";s:16:"assertFileEquals";s:14:"namespacedName";s:34:"PHPUnit\Framework\assertFileEquals";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:73:"assertFileEquals(string $expected, string $actual, string $message): void";s:9:"startLine";i:525;s:7:"endLine";i:528;s:3:"ccn";i:1;}s:48:"PHPUnit\Framework\assertFileEqualsCanonicalizing";a:7:{s:4:"name";s:30:"assertFileEqualsCanonicalizing";s:14:"namespacedName";s:48:"PHPUnit\Framework\assertFileEqualsCanonicalizing";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:87:"assertFileEqualsCanonicalizing(string $expected, string $actual, string $message): void";s:9:"startLine";i:543;s:7:"endLine";i:546;s:3:"ccn";i:1;}s:46:"PHPUnit\Framework\assertFileEqualsIgnoringCase";a:7:{s:4:"name";s:28:"assertFileEqualsIgnoringCase";s:14:"namespacedName";s:46:"PHPUnit\Framework\assertFileEqualsIgnoringCase";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:85:"assertFileEqualsIgnoringCase(string $expected, string $actual, string $message): void";s:9:"startLine";i:561;s:7:"endLine";i:564;s:3:"ccn";i:1;}s:37:"PHPUnit\Framework\assertFileNotEquals";a:7:{s:4:"name";s:19:"assertFileNotEquals";s:14:"namespacedName";s:37:"PHPUnit\Framework\assertFileNotEquals";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:76:"assertFileNotEquals(string $expected, string $actual, string $message): void";s:9:"startLine";i:579;s:7:"endLine";i:582;s:3:"ccn";i:1;}s:51:"PHPUnit\Framework\assertFileNotEqualsCanonicalizing";a:7:{s:4:"name";s:33:"assertFileNotEqualsCanonicalizing";s:14:"namespacedName";s:51:"PHPUnit\Framework\assertFileNotEqualsCanonicalizing";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:90:"assertFileNotEqualsCanonicalizing(string $expected, string $actual, string $message): void";s:9:"startLine";i:597;s:7:"endLine";i:600;s:3:"ccn";i:1;}s:49:"PHPUnit\Framework\assertFileNotEqualsIgnoringCase";a:7:{s:4:"name";s:31:"assertFileNotEqualsIgnoringCase";s:14:"namespacedName";s:49:"PHPUnit\Framework\assertFileNotEqualsIgnoringCase";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:88:"assertFileNotEqualsIgnoringCase(string $expected, string $actual, string $message): void";s:9:"startLine";i:615;s:7:"endLine";i:618;s:3:"ccn";i:1;}s:40:"PHPUnit\Framework\assertStringEqualsFile";a:7:{s:4:"name";s:22:"assertStringEqualsFile";s:14:"namespacedName";s:40:"PHPUnit\Framework\assertStringEqualsFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:89:"assertStringEqualsFile(string $expectedFile, string $actualString, string $message): void";s:9:"startLine";i:633;s:7:"endLine";i:636;s:3:"ccn";i:1;}s:54:"PHPUnit\Framework\assertStringEqualsFileCanonicalizing";a:7:{s:4:"name";s:36:"assertStringEqualsFileCanonicalizing";s:14:"namespacedName";s:54:"PHPUnit\Framework\assertStringEqualsFileCanonicalizing";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:103:"assertStringEqualsFileCanonicalizing(string $expectedFile, string $actualString, string $message): void";s:9:"startLine";i:651;s:7:"endLine";i:654;s:3:"ccn";i:1;}s:52:"PHPUnit\Framework\assertStringEqualsFileIgnoringCase";a:7:{s:4:"name";s:34:"assertStringEqualsFileIgnoringCase";s:14:"namespacedName";s:52:"PHPUnit\Framework\assertStringEqualsFileIgnoringCase";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:101:"assertStringEqualsFileIgnoringCase(string $expectedFile, string $actualString, string $message): void";s:9:"startLine";i:669;s:7:"endLine";i:672;s:3:"ccn";i:1;}s:43:"PHPUnit\Framework\assertStringNotEqualsFile";a:7:{s:4:"name";s:25:"assertStringNotEqualsFile";s:14:"namespacedName";s:43:"PHPUnit\Framework\assertStringNotEqualsFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:92:"assertStringNotEqualsFile(string $expectedFile, string $actualString, string $message): void";s:9:"startLine";i:687;s:7:"endLine";i:690;s:3:"ccn";i:1;}s:57:"PHPUnit\Framework\assertStringNotEqualsFileCanonicalizing";a:7:{s:4:"name";s:39:"assertStringNotEqualsFileCanonicalizing";s:14:"namespacedName";s:57:"PHPUnit\Framework\assertStringNotEqualsFileCanonicalizing";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:106:"assertStringNotEqualsFileCanonicalizing(string $expectedFile, string $actualString, string $message): void";s:9:"startLine";i:705;s:7:"endLine";i:708;s:3:"ccn";i:1;}s:55:"PHPUnit\Framework\assertStringNotEqualsFileIgnoringCase";a:7:{s:4:"name";s:37:"assertStringNotEqualsFileIgnoringCase";s:14:"namespacedName";s:55:"PHPUnit\Framework\assertStringNotEqualsFileIgnoringCase";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:104:"assertStringNotEqualsFileIgnoringCase(string $expectedFile, string $actualString, string $message): void";s:9:"startLine";i:723;s:7:"endLine";i:726;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\assertIsReadable";a:7:{s:4:"name";s:16:"assertIsReadable";s:14:"namespacedName";s:34:"PHPUnit\Framework\assertIsReadable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:57:"assertIsReadable(string $filename, string $message): void";s:9:"startLine";i:740;s:7:"endLine";i:743;s:3:"ccn";i:1;}s:37:"PHPUnit\Framework\assertIsNotReadable";a:7:{s:4:"name";s:19:"assertIsNotReadable";s:14:"namespacedName";s:37:"PHPUnit\Framework\assertIsNotReadable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:60:"assertIsNotReadable(string $filename, string $message): void";s:9:"startLine";i:757;s:7:"endLine";i:760;s:3:"ccn";i:1;}s:37:"PHPUnit\Framework\assertNotIsReadable";a:7:{s:4:"name";s:19:"assertNotIsReadable";s:14:"namespacedName";s:37:"PHPUnit\Framework\assertNotIsReadable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:60:"assertNotIsReadable(string $filename, string $message): void";s:9:"startLine";i:778;s:7:"endLine";i:781;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\assertIsWritable";a:7:{s:4:"name";s:16:"assertIsWritable";s:14:"namespacedName";s:34:"PHPUnit\Framework\assertIsWritable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:57:"assertIsWritable(string $filename, string $message): void";s:9:"startLine";i:795;s:7:"endLine";i:798;s:3:"ccn";i:1;}s:37:"PHPUnit\Framework\assertIsNotWritable";a:7:{s:4:"name";s:19:"assertIsNotWritable";s:14:"namespacedName";s:37:"PHPUnit\Framework\assertIsNotWritable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:60:"assertIsNotWritable(string $filename, string $message): void";s:9:"startLine";i:812;s:7:"endLine";i:815;s:3:"ccn";i:1;}s:37:"PHPUnit\Framework\assertNotIsWritable";a:7:{s:4:"name";s:19:"assertNotIsWritable";s:14:"namespacedName";s:37:"PHPUnit\Framework\assertNotIsWritable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:60:"assertNotIsWritable(string $filename, string $message): void";s:9:"startLine";i:833;s:7:"endLine";i:836;s:3:"ccn";i:1;}s:39:"PHPUnit\Framework\assertDirectoryExists";a:7:{s:4:"name";s:21:"assertDirectoryExists";s:14:"namespacedName";s:39:"PHPUnit\Framework\assertDirectoryExists";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:63:"assertDirectoryExists(string $directory, string $message): void";s:9:"startLine";i:850;s:7:"endLine";i:853;s:3:"ccn";i:1;}s:45:"PHPUnit\Framework\assertDirectoryDoesNotExist";a:7:{s:4:"name";s:27:"assertDirectoryDoesNotExist";s:14:"namespacedName";s:45:"PHPUnit\Framework\assertDirectoryDoesNotExist";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:69:"assertDirectoryDoesNotExist(string $directory, string $message): void";s:9:"startLine";i:867;s:7:"endLine";i:870;s:3:"ccn";i:1;}s:42:"PHPUnit\Framework\assertDirectoryNotExists";a:7:{s:4:"name";s:24:"assertDirectoryNotExists";s:14:"namespacedName";s:42:"PHPUnit\Framework\assertDirectoryNotExists";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:66:"assertDirectoryNotExists(string $directory, string $message): void";s:9:"startLine";i:888;s:7:"endLine";i:891;s:3:"ccn";i:1;}s:43:"PHPUnit\Framework\assertDirectoryIsReadable";a:7:{s:4:"name";s:25:"assertDirectoryIsReadable";s:14:"namespacedName";s:43:"PHPUnit\Framework\assertDirectoryIsReadable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:67:"assertDirectoryIsReadable(string $directory, string $message): void";s:9:"startLine";i:905;s:7:"endLine";i:908;s:3:"ccn";i:1;}s:46:"PHPUnit\Framework\assertDirectoryIsNotReadable";a:7:{s:4:"name";s:28:"assertDirectoryIsNotReadable";s:14:"namespacedName";s:46:"PHPUnit\Framework\assertDirectoryIsNotReadable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:70:"assertDirectoryIsNotReadable(string $directory, string $message): void";s:9:"startLine";i:922;s:7:"endLine";i:925;s:3:"ccn";i:1;}s:46:"PHPUnit\Framework\assertDirectoryNotIsReadable";a:7:{s:4:"name";s:28:"assertDirectoryNotIsReadable";s:14:"namespacedName";s:46:"PHPUnit\Framework\assertDirectoryNotIsReadable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:70:"assertDirectoryNotIsReadable(string $directory, string $message): void";s:9:"startLine";i:943;s:7:"endLine";i:946;s:3:"ccn";i:1;}s:43:"PHPUnit\Framework\assertDirectoryIsWritable";a:7:{s:4:"name";s:25:"assertDirectoryIsWritable";s:14:"namespacedName";s:43:"PHPUnit\Framework\assertDirectoryIsWritable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:67:"assertDirectoryIsWritable(string $directory, string $message): void";s:9:"startLine";i:960;s:7:"endLine";i:963;s:3:"ccn";i:1;}s:46:"PHPUnit\Framework\assertDirectoryIsNotWritable";a:7:{s:4:"name";s:28:"assertDirectoryIsNotWritable";s:14:"namespacedName";s:46:"PHPUnit\Framework\assertDirectoryIsNotWritable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:70:"assertDirectoryIsNotWritable(string $directory, string $message): void";s:9:"startLine";i:977;s:7:"endLine";i:980;s:3:"ccn";i:1;}s:46:"PHPUnit\Framework\assertDirectoryNotIsWritable";a:7:{s:4:"name";s:28:"assertDirectoryNotIsWritable";s:14:"namespacedName";s:46:"PHPUnit\Framework\assertDirectoryNotIsWritable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:70:"assertDirectoryNotIsWritable(string $directory, string $message): void";s:9:"startLine";i:998;s:7:"endLine";i:1001;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\assertFileExists";a:7:{s:4:"name";s:16:"assertFileExists";s:14:"namespacedName";s:34:"PHPUnit\Framework\assertFileExists";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:57:"assertFileExists(string $filename, string $message): void";s:9:"startLine";i:1015;s:7:"endLine";i:1018;s:3:"ccn";i:1;}s:40:"PHPUnit\Framework\assertFileDoesNotExist";a:7:{s:4:"name";s:22:"assertFileDoesNotExist";s:14:"namespacedName";s:40:"PHPUnit\Framework\assertFileDoesNotExist";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:63:"assertFileDoesNotExist(string $filename, string $message): void";s:9:"startLine";i:1032;s:7:"endLine";i:1035;s:3:"ccn";i:1;}s:37:"PHPUnit\Framework\assertFileNotExists";a:7:{s:4:"name";s:19:"assertFileNotExists";s:14:"namespacedName";s:37:"PHPUnit\Framework\assertFileNotExists";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:60:"assertFileNotExists(string $filename, string $message): void";s:9:"startLine";i:1053;s:7:"endLine";i:1056;s:3:"ccn";i:1;}s:38:"PHPUnit\Framework\assertFileIsReadable";a:7:{s:4:"name";s:20:"assertFileIsReadable";s:14:"namespacedName";s:38:"PHPUnit\Framework\assertFileIsReadable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:57:"assertFileIsReadable(string $file, string $message): void";s:9:"startLine";i:1070;s:7:"endLine";i:1073;s:3:"ccn";i:1;}s:41:"PHPUnit\Framework\assertFileIsNotReadable";a:7:{s:4:"name";s:23:"assertFileIsNotReadable";s:14:"namespacedName";s:41:"PHPUnit\Framework\assertFileIsNotReadable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:60:"assertFileIsNotReadable(string $file, string $message): void";s:9:"startLine";i:1087;s:7:"endLine";i:1090;s:3:"ccn";i:1;}s:41:"PHPUnit\Framework\assertFileNotIsReadable";a:7:{s:4:"name";s:23:"assertFileNotIsReadable";s:14:"namespacedName";s:41:"PHPUnit\Framework\assertFileNotIsReadable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:60:"assertFileNotIsReadable(string $file, string $message): void";s:9:"startLine";i:1108;s:7:"endLine";i:1111;s:3:"ccn";i:1;}s:38:"PHPUnit\Framework\assertFileIsWritable";a:7:{s:4:"name";s:20:"assertFileIsWritable";s:14:"namespacedName";s:38:"PHPUnit\Framework\assertFileIsWritable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:57:"assertFileIsWritable(string $file, string $message): void";s:9:"startLine";i:1125;s:7:"endLine";i:1128;s:3:"ccn";i:1;}s:41:"PHPUnit\Framework\assertFileIsNotWritable";a:7:{s:4:"name";s:23:"assertFileIsNotWritable";s:14:"namespacedName";s:41:"PHPUnit\Framework\assertFileIsNotWritable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:60:"assertFileIsNotWritable(string $file, string $message): void";s:9:"startLine";i:1142;s:7:"endLine";i:1145;s:3:"ccn";i:1;}s:41:"PHPUnit\Framework\assertFileNotIsWritable";a:7:{s:4:"name";s:23:"assertFileNotIsWritable";s:14:"namespacedName";s:41:"PHPUnit\Framework\assertFileNotIsWritable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:60:"assertFileNotIsWritable(string $file, string $message): void";s:9:"startLine";i:1163;s:7:"endLine";i:1166;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\assertTrue";a:7:{s:4:"name";s:10:"assertTrue";s:14:"namespacedName";s:28:"PHPUnit\Framework\assertTrue";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:45:"assertTrue($condition, string $message): void";s:9:"startLine";i:1182;s:7:"endLine";i:1185;s:3:"ccn";i:1;}s:31:"PHPUnit\Framework\assertNotTrue";a:7:{s:4:"name";s:13:"assertNotTrue";s:14:"namespacedName";s:31:"PHPUnit\Framework\assertNotTrue";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:48:"assertNotTrue($condition, string $message): void";s:9:"startLine";i:1201;s:7:"endLine";i:1204;s:3:"ccn";i:1;}s:29:"PHPUnit\Framework\assertFalse";a:7:{s:4:"name";s:11:"assertFalse";s:14:"namespacedName";s:29:"PHPUnit\Framework\assertFalse";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:46:"assertFalse($condition, string $message): void";s:9:"startLine";i:1220;s:7:"endLine";i:1223;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\assertNotFalse";a:7:{s:4:"name";s:14:"assertNotFalse";s:14:"namespacedName";s:32:"PHPUnit\Framework\assertNotFalse";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:49:"assertNotFalse($condition, string $message): void";s:9:"startLine";i:1239;s:7:"endLine";i:1242;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\assertNull";a:7:{s:4:"name";s:10:"assertNull";s:14:"namespacedName";s:28:"PHPUnit\Framework\assertNull";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:42:"assertNull($actual, string $message): void";s:9:"startLine";i:1258;s:7:"endLine";i:1261;s:3:"ccn";i:1;}s:31:"PHPUnit\Framework\assertNotNull";a:7:{s:4:"name";s:13:"assertNotNull";s:14:"namespacedName";s:31:"PHPUnit\Framework\assertNotNull";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:45:"assertNotNull($actual, string $message): void";s:9:"startLine";i:1277;s:7:"endLine";i:1280;s:3:"ccn";i:1;}s:30:"PHPUnit\Framework\assertFinite";a:7:{s:4:"name";s:12:"assertFinite";s:14:"namespacedName";s:30:"PHPUnit\Framework\assertFinite";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:44:"assertFinite($actual, string $message): void";s:9:"startLine";i:1294;s:7:"endLine";i:1297;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\assertInfinite";a:7:{s:4:"name";s:14:"assertInfinite";s:14:"namespacedName";s:32:"PHPUnit\Framework\assertInfinite";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:46:"assertInfinite($actual, string $message): void";s:9:"startLine";i:1311;s:7:"endLine";i:1314;s:3:"ccn";i:1;}s:27:"PHPUnit\Framework\assertNan";a:7:{s:4:"name";s:9:"assertNan";s:14:"namespacedName";s:27:"PHPUnit\Framework\assertNan";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:41:"assertNan($actual, string $message): void";s:9:"startLine";i:1328;s:7:"endLine";i:1331;s:3:"ccn";i:1;}s:41:"PHPUnit\Framework\assertClassHasAttribute";a:7:{s:4:"name";s:23:"assertClassHasAttribute";s:14:"namespacedName";s:41:"PHPUnit\Framework\assertClassHasAttribute";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:88:"assertClassHasAttribute(string $attributeName, string $className, string $message): void";s:9:"startLine";i:1346;s:7:"endLine";i:1349;s:3:"ccn";i:1;}s:44:"PHPUnit\Framework\assertClassNotHasAttribute";a:7:{s:4:"name";s:26:"assertClassNotHasAttribute";s:14:"namespacedName";s:44:"PHPUnit\Framework\assertClassNotHasAttribute";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:91:"assertClassNotHasAttribute(string $attributeName, string $className, string $message): void";s:9:"startLine";i:1364;s:7:"endLine";i:1367;s:3:"ccn";i:1;}s:47:"PHPUnit\Framework\assertClassHasStaticAttribute";a:7:{s:4:"name";s:29:"assertClassHasStaticAttribute";s:14:"namespacedName";s:47:"PHPUnit\Framework\assertClassHasStaticAttribute";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:94:"assertClassHasStaticAttribute(string $attributeName, string $className, string $message): void";s:9:"startLine";i:1382;s:7:"endLine";i:1385;s:3:"ccn";i:1;}s:50:"PHPUnit\Framework\assertClassNotHasStaticAttribute";a:7:{s:4:"name";s:32:"assertClassNotHasStaticAttribute";s:14:"namespacedName";s:50:"PHPUnit\Framework\assertClassNotHasStaticAttribute";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:97:"assertClassNotHasStaticAttribute(string $attributeName, string $className, string $message): void";s:9:"startLine";i:1400;s:7:"endLine";i:1403;s:3:"ccn";i:1;}s:42:"PHPUnit\Framework\assertObjectHasAttribute";a:7:{s:4:"name";s:24:"assertObjectHasAttribute";s:14:"namespacedName";s:42:"PHPUnit\Framework\assertObjectHasAttribute";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:79:"assertObjectHasAttribute(string $attributeName, $object, string $message): void";s:9:"startLine";i:1420;s:7:"endLine";i:1423;s:3:"ccn";i:1;}s:45:"PHPUnit\Framework\assertObjectNotHasAttribute";a:7:{s:4:"name";s:27:"assertObjectNotHasAttribute";s:14:"namespacedName";s:45:"PHPUnit\Framework\assertObjectNotHasAttribute";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:82:"assertObjectNotHasAttribute(string $attributeName, $object, string $message): void";s:9:"startLine";i:1440;s:7:"endLine";i:1443;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\assertSame";a:7:{s:4:"name";s:10:"assertSame";s:14:"namespacedName";s:28:"PHPUnit\Framework\assertSame";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:53:"assertSame($expected, $actual, string $message): void";s:9:"startLine";i:1463;s:7:"endLine";i:1466;s:3:"ccn";i:1;}s:31:"PHPUnit\Framework\assertNotSame";a:7:{s:4:"name";s:13:"assertNotSame";s:14:"namespacedName";s:31:"PHPUnit\Framework\assertNotSame";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:56:"assertNotSame($expected, $actual, string $message): void";s:9:"startLine";i:1482;s:7:"endLine";i:1485;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\assertInstanceOf";a:7:{s:4:"name";s:16:"assertInstanceOf";s:14:"namespacedName";s:34:"PHPUnit\Framework\assertInstanceOf";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:66:"assertInstanceOf(string $expected, $actual, string $message): void";s:9:"startLine";i:1504;s:7:"endLine";i:1507;s:3:"ccn";i:1;}s:37:"PHPUnit\Framework\assertNotInstanceOf";a:7:{s:4:"name";s:19:"assertNotInstanceOf";s:14:"namespacedName";s:37:"PHPUnit\Framework\assertNotInstanceOf";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:69:"assertNotInstanceOf(string $expected, $actual, string $message): void";s:9:"startLine";i:1526;s:7:"endLine";i:1529;s:3:"ccn";i:1;}s:31:"PHPUnit\Framework\assertIsArray";a:7:{s:4:"name";s:13:"assertIsArray";s:14:"namespacedName";s:31:"PHPUnit\Framework\assertIsArray";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:45:"assertIsArray($actual, string $message): void";s:9:"startLine";i:1545;s:7:"endLine";i:1548;s:3:"ccn";i:1;}s:30:"PHPUnit\Framework\assertIsBool";a:7:{s:4:"name";s:12:"assertIsBool";s:14:"namespacedName";s:30:"PHPUnit\Framework\assertIsBool";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:44:"assertIsBool($actual, string $message): void";s:9:"startLine";i:1564;s:7:"endLine";i:1567;s:3:"ccn";i:1;}s:31:"PHPUnit\Framework\assertIsFloat";a:7:{s:4:"name";s:13:"assertIsFloat";s:14:"namespacedName";s:31:"PHPUnit\Framework\assertIsFloat";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:45:"assertIsFloat($actual, string $message): void";s:9:"startLine";i:1583;s:7:"endLine";i:1586;s:3:"ccn";i:1;}s:29:"PHPUnit\Framework\assertIsInt";a:7:{s:4:"name";s:11:"assertIsInt";s:14:"namespacedName";s:29:"PHPUnit\Framework\assertIsInt";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:43:"assertIsInt($actual, string $message): void";s:9:"startLine";i:1602;s:7:"endLine";i:1605;s:3:"ccn";i:1;}s:33:"PHPUnit\Framework\assertIsNumeric";a:7:{s:4:"name";s:15:"assertIsNumeric";s:14:"namespacedName";s:33:"PHPUnit\Framework\assertIsNumeric";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:47:"assertIsNumeric($actual, string $message): void";s:9:"startLine";i:1621;s:7:"endLine";i:1624;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\assertIsObject";a:7:{s:4:"name";s:14:"assertIsObject";s:14:"namespacedName";s:32:"PHPUnit\Framework\assertIsObject";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:46:"assertIsObject($actual, string $message): void";s:9:"startLine";i:1640;s:7:"endLine";i:1643;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\assertIsResource";a:7:{s:4:"name";s:16:"assertIsResource";s:14:"namespacedName";s:34:"PHPUnit\Framework\assertIsResource";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:48:"assertIsResource($actual, string $message): void";s:9:"startLine";i:1659;s:7:"endLine";i:1662;s:3:"ccn";i:1;}s:40:"PHPUnit\Framework\assertIsClosedResource";a:7:{s:4:"name";s:22:"assertIsClosedResource";s:14:"namespacedName";s:40:"PHPUnit\Framework\assertIsClosedResource";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:54:"assertIsClosedResource($actual, string $message): void";s:9:"startLine";i:1678;s:7:"endLine";i:1681;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\assertIsString";a:7:{s:4:"name";s:14:"assertIsString";s:14:"namespacedName";s:32:"PHPUnit\Framework\assertIsString";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:46:"assertIsString($actual, string $message): void";s:9:"startLine";i:1697;s:7:"endLine";i:1700;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\assertIsScalar";a:7:{s:4:"name";s:14:"assertIsScalar";s:14:"namespacedName";s:32:"PHPUnit\Framework\assertIsScalar";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:46:"assertIsScalar($actual, string $message): void";s:9:"startLine";i:1716;s:7:"endLine";i:1719;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\assertIsCallable";a:7:{s:4:"name";s:16:"assertIsCallable";s:14:"namespacedName";s:34:"PHPUnit\Framework\assertIsCallable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:48:"assertIsCallable($actual, string $message): void";s:9:"startLine";i:1735;s:7:"endLine";i:1738;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\assertIsIterable";a:7:{s:4:"name";s:16:"assertIsIterable";s:14:"namespacedName";s:34:"PHPUnit\Framework\assertIsIterable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:48:"assertIsIterable($actual, string $message): void";s:9:"startLine";i:1754;s:7:"endLine";i:1757;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\assertIsNotArray";a:7:{s:4:"name";s:16:"assertIsNotArray";s:14:"namespacedName";s:34:"PHPUnit\Framework\assertIsNotArray";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:48:"assertIsNotArray($actual, string $message): void";s:9:"startLine";i:1773;s:7:"endLine";i:1776;s:3:"ccn";i:1;}s:33:"PHPUnit\Framework\assertIsNotBool";a:7:{s:4:"name";s:15:"assertIsNotBool";s:14:"namespacedName";s:33:"PHPUnit\Framework\assertIsNotBool";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:47:"assertIsNotBool($actual, string $message): void";s:9:"startLine";i:1792;s:7:"endLine";i:1795;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\assertIsNotFloat";a:7:{s:4:"name";s:16:"assertIsNotFloat";s:14:"namespacedName";s:34:"PHPUnit\Framework\assertIsNotFloat";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:48:"assertIsNotFloat($actual, string $message): void";s:9:"startLine";i:1811;s:7:"endLine";i:1814;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\assertIsNotInt";a:7:{s:4:"name";s:14:"assertIsNotInt";s:14:"namespacedName";s:32:"PHPUnit\Framework\assertIsNotInt";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:46:"assertIsNotInt($actual, string $message): void";s:9:"startLine";i:1830;s:7:"endLine";i:1833;s:3:"ccn";i:1;}s:36:"PHPUnit\Framework\assertIsNotNumeric";a:7:{s:4:"name";s:18:"assertIsNotNumeric";s:14:"namespacedName";s:36:"PHPUnit\Framework\assertIsNotNumeric";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:50:"assertIsNotNumeric($actual, string $message): void";s:9:"startLine";i:1849;s:7:"endLine";i:1852;s:3:"ccn";i:1;}s:35:"PHPUnit\Framework\assertIsNotObject";a:7:{s:4:"name";s:17:"assertIsNotObject";s:14:"namespacedName";s:35:"PHPUnit\Framework\assertIsNotObject";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:49:"assertIsNotObject($actual, string $message): void";s:9:"startLine";i:1868;s:7:"endLine";i:1871;s:3:"ccn";i:1;}s:37:"PHPUnit\Framework\assertIsNotResource";a:7:{s:4:"name";s:19:"assertIsNotResource";s:14:"namespacedName";s:37:"PHPUnit\Framework\assertIsNotResource";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:51:"assertIsNotResource($actual, string $message): void";s:9:"startLine";i:1887;s:7:"endLine";i:1890;s:3:"ccn";i:1;}s:43:"PHPUnit\Framework\assertIsNotClosedResource";a:7:{s:4:"name";s:25:"assertIsNotClosedResource";s:14:"namespacedName";s:43:"PHPUnit\Framework\assertIsNotClosedResource";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:57:"assertIsNotClosedResource($actual, string $message): void";s:9:"startLine";i:1906;s:7:"endLine";i:1909;s:3:"ccn";i:1;}s:35:"PHPUnit\Framework\assertIsNotString";a:7:{s:4:"name";s:17:"assertIsNotString";s:14:"namespacedName";s:35:"PHPUnit\Framework\assertIsNotString";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:49:"assertIsNotString($actual, string $message): void";s:9:"startLine";i:1925;s:7:"endLine";i:1928;s:3:"ccn";i:1;}s:35:"PHPUnit\Framework\assertIsNotScalar";a:7:{s:4:"name";s:17:"assertIsNotScalar";s:14:"namespacedName";s:35:"PHPUnit\Framework\assertIsNotScalar";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:49:"assertIsNotScalar($actual, string $message): void";s:9:"startLine";i:1944;s:7:"endLine";i:1947;s:3:"ccn";i:1;}s:37:"PHPUnit\Framework\assertIsNotCallable";a:7:{s:4:"name";s:19:"assertIsNotCallable";s:14:"namespacedName";s:37:"PHPUnit\Framework\assertIsNotCallable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:51:"assertIsNotCallable($actual, string $message): void";s:9:"startLine";i:1963;s:7:"endLine";i:1966;s:3:"ccn";i:1;}s:37:"PHPUnit\Framework\assertIsNotIterable";a:7:{s:4:"name";s:19:"assertIsNotIterable";s:14:"namespacedName";s:37:"PHPUnit\Framework\assertIsNotIterable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:51:"assertIsNotIterable($actual, string $message): void";s:9:"startLine";i:1982;s:7:"endLine";i:1985;s:3:"ccn";i:1;}s:48:"PHPUnit\Framework\assertMatchesRegularExpression";a:7:{s:4:"name";s:30:"assertMatchesRegularExpression";s:14:"namespacedName";s:48:"PHPUnit\Framework\assertMatchesRegularExpression";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:86:"assertMatchesRegularExpression(string $pattern, string $string, string $message): void";s:9:"startLine";i:1999;s:7:"endLine";i:2002;s:3:"ccn";i:1;}s:30:"PHPUnit\Framework\assertRegExp";a:7:{s:4:"name";s:12:"assertRegExp";s:14:"namespacedName";s:30:"PHPUnit\Framework\assertRegExp";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:68:"assertRegExp(string $pattern, string $string, string $message): void";s:9:"startLine";i:2020;s:7:"endLine";i:2023;s:3:"ccn";i:1;}s:53:"PHPUnit\Framework\assertDoesNotMatchRegularExpression";a:7:{s:4:"name";s:35:"assertDoesNotMatchRegularExpression";s:14:"namespacedName";s:53:"PHPUnit\Framework\assertDoesNotMatchRegularExpression";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:91:"assertDoesNotMatchRegularExpression(string $pattern, string $string, string $message): void";s:9:"startLine";i:2037;s:7:"endLine";i:2040;s:3:"ccn";i:1;}s:33:"PHPUnit\Framework\assertNotRegExp";a:7:{s:4:"name";s:15:"assertNotRegExp";s:14:"namespacedName";s:33:"PHPUnit\Framework\assertNotRegExp";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:71:"assertNotRegExp(string $pattern, string $string, string $message): void";s:9:"startLine";i:2058;s:7:"endLine";i:2061;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\assertSameSize";a:7:{s:4:"name";s:14:"assertSameSize";s:14:"namespacedName";s:32:"PHPUnit\Framework\assertSameSize";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:57:"assertSameSize($expected, $actual, string $message): void";s:9:"startLine";i:2080;s:7:"endLine";i:2083;s:3:"ccn";i:1;}s:35:"PHPUnit\Framework\assertNotSameSize";a:7:{s:4:"name";s:17:"assertNotSameSize";s:14:"namespacedName";s:35:"PHPUnit\Framework\assertNotSameSize";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:60:"assertNotSameSize($expected, $actual, string $message): void";s:9:"startLine";i:2102;s:7:"endLine";i:2105;s:3:"ccn";i:1;}s:43:"PHPUnit\Framework\assertStringMatchesFormat";a:7:{s:4:"name";s:25:"assertStringMatchesFormat";s:14:"namespacedName";s:43:"PHPUnit\Framework\assertStringMatchesFormat";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:80:"assertStringMatchesFormat(string $format, string $string, string $message): void";s:9:"startLine";i:2119;s:7:"endLine";i:2122;s:3:"ccn";i:1;}s:46:"PHPUnit\Framework\assertStringNotMatchesFormat";a:7:{s:4:"name";s:28:"assertStringNotMatchesFormat";s:14:"namespacedName";s:46:"PHPUnit\Framework\assertStringNotMatchesFormat";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:83:"assertStringNotMatchesFormat(string $format, string $string, string $message): void";s:9:"startLine";i:2136;s:7:"endLine";i:2139;s:3:"ccn";i:1;}s:47:"PHPUnit\Framework\assertStringMatchesFormatFile";a:7:{s:4:"name";s:29:"assertStringMatchesFormatFile";s:14:"namespacedName";s:47:"PHPUnit\Framework\assertStringMatchesFormatFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:88:"assertStringMatchesFormatFile(string $formatFile, string $string, string $message): void";s:9:"startLine";i:2153;s:7:"endLine";i:2156;s:3:"ccn";i:1;}s:50:"PHPUnit\Framework\assertStringNotMatchesFormatFile";a:7:{s:4:"name";s:32:"assertStringNotMatchesFormatFile";s:14:"namespacedName";s:50:"PHPUnit\Framework\assertStringNotMatchesFormatFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:91:"assertStringNotMatchesFormatFile(string $formatFile, string $string, string $message): void";s:9:"startLine";i:2170;s:7:"endLine";i:2173;s:3:"ccn";i:1;}s:40:"PHPUnit\Framework\assertStringStartsWith";a:7:{s:4:"name";s:22:"assertStringStartsWith";s:14:"namespacedName";s:40:"PHPUnit\Framework\assertStringStartsWith";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:77:"assertStringStartsWith(string $prefix, string $string, string $message): void";s:9:"startLine";i:2187;s:7:"endLine";i:2190;s:3:"ccn";i:1;}s:43:"PHPUnit\Framework\assertStringStartsNotWith";a:7:{s:4:"name";s:25:"assertStringStartsNotWith";s:14:"namespacedName";s:43:"PHPUnit\Framework\assertStringStartsNotWith";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:66:"assertStringStartsNotWith($prefix, $string, string $message): void";s:9:"startLine";i:2207;s:7:"endLine";i:2210;s:3:"ccn";i:1;}s:44:"PHPUnit\Framework\assertStringContainsString";a:7:{s:4:"name";s:26:"assertStringContainsString";s:14:"namespacedName";s:44:"PHPUnit\Framework\assertStringContainsString";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:83:"assertStringContainsString(string $needle, string $haystack, string $message): void";s:9:"startLine";i:2222;s:7:"endLine";i:2225;s:3:"ccn";i:1;}s:56:"PHPUnit\Framework\assertStringContainsStringIgnoringCase";a:7:{s:4:"name";s:38:"assertStringContainsStringIgnoringCase";s:14:"namespacedName";s:56:"PHPUnit\Framework\assertStringContainsStringIgnoringCase";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:95:"assertStringContainsStringIgnoringCase(string $needle, string $haystack, string $message): void";s:9:"startLine";i:2237;s:7:"endLine";i:2240;s:3:"ccn";i:1;}s:47:"PHPUnit\Framework\assertStringNotContainsString";a:7:{s:4:"name";s:29:"assertStringNotContainsString";s:14:"namespacedName";s:47:"PHPUnit\Framework\assertStringNotContainsString";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:86:"assertStringNotContainsString(string $needle, string $haystack, string $message): void";s:9:"startLine";i:2252;s:7:"endLine";i:2255;s:3:"ccn";i:1;}s:59:"PHPUnit\Framework\assertStringNotContainsStringIgnoringCase";a:7:{s:4:"name";s:41:"assertStringNotContainsStringIgnoringCase";s:14:"namespacedName";s:59:"PHPUnit\Framework\assertStringNotContainsStringIgnoringCase";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:98:"assertStringNotContainsStringIgnoringCase(string $needle, string $haystack, string $message): void";s:9:"startLine";i:2267;s:7:"endLine";i:2270;s:3:"ccn";i:1;}s:38:"PHPUnit\Framework\assertStringEndsWith";a:7:{s:4:"name";s:20:"assertStringEndsWith";s:14:"namespacedName";s:38:"PHPUnit\Framework\assertStringEndsWith";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:75:"assertStringEndsWith(string $suffix, string $string, string $message): void";s:9:"startLine";i:2284;s:7:"endLine";i:2287;s:3:"ccn";i:1;}s:41:"PHPUnit\Framework\assertStringEndsNotWith";a:7:{s:4:"name";s:23:"assertStringEndsNotWith";s:14:"namespacedName";s:41:"PHPUnit\Framework\assertStringEndsNotWith";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:78:"assertStringEndsNotWith(string $suffix, string $string, string $message): void";s:9:"startLine";i:2301;s:7:"endLine";i:2304;s:3:"ccn";i:1;}s:44:"PHPUnit\Framework\assertXmlFileEqualsXmlFile";a:7:{s:4:"name";s:26:"assertXmlFileEqualsXmlFile";s:14:"namespacedName";s:44:"PHPUnit\Framework\assertXmlFileEqualsXmlFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:91:"assertXmlFileEqualsXmlFile(string $expectedFile, string $actualFile, string $message): void";s:9:"startLine";i:2319;s:7:"endLine";i:2322;s:3:"ccn";i:1;}s:47:"PHPUnit\Framework\assertXmlFileNotEqualsXmlFile";a:7:{s:4:"name";s:29:"assertXmlFileNotEqualsXmlFile";s:14:"namespacedName";s:47:"PHPUnit\Framework\assertXmlFileNotEqualsXmlFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:94:"assertXmlFileNotEqualsXmlFile(string $expectedFile, string $actualFile, string $message): void";s:9:"startLine";i:2337;s:7:"endLine";i:2340;s:3:"ccn";i:1;}s:46:"PHPUnit\Framework\assertXmlStringEqualsXmlFile";a:7:{s:4:"name";s:28:"assertXmlStringEqualsXmlFile";s:14:"namespacedName";s:46:"PHPUnit\Framework\assertXmlStringEqualsXmlFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:85:"assertXmlStringEqualsXmlFile(string $expectedFile, $actualXml, string $message): void";s:9:"startLine";i:2357;s:7:"endLine";i:2360;s:3:"ccn";i:1;}s:49:"PHPUnit\Framework\assertXmlStringNotEqualsXmlFile";a:7:{s:4:"name";s:31:"assertXmlStringNotEqualsXmlFile";s:14:"namespacedName";s:49:"PHPUnit\Framework\assertXmlStringNotEqualsXmlFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:88:"assertXmlStringNotEqualsXmlFile(string $expectedFile, $actualXml, string $message): void";s:9:"startLine";i:2377;s:7:"endLine";i:2380;s:3:"ccn";i:1;}s:48:"PHPUnit\Framework\assertXmlStringEqualsXmlString";a:7:{s:4:"name";s:30:"assertXmlStringEqualsXmlString";s:14:"namespacedName";s:48:"PHPUnit\Framework\assertXmlStringEqualsXmlString";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:79:"assertXmlStringEqualsXmlString($expectedXml, $actualXml, string $message): void";s:9:"startLine";i:2398;s:7:"endLine";i:2401;s:3:"ccn";i:1;}s:51:"PHPUnit\Framework\assertXmlStringNotEqualsXmlString";a:7:{s:4:"name";s:33:"assertXmlStringNotEqualsXmlString";s:14:"namespacedName";s:51:"PHPUnit\Framework\assertXmlStringNotEqualsXmlString";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:82:"assertXmlStringNotEqualsXmlString($expectedXml, $actualXml, string $message): void";s:9:"startLine";i:2419;s:7:"endLine";i:2422;s:3:"ccn";i:1;}s:41:"PHPUnit\Framework\assertEqualXMLStructure";a:7:{s:4:"name";s:23:"assertEqualXMLStructure";s:14:"namespacedName";s:41:"PHPUnit\Framework\assertEqualXMLStructure";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:125:"assertEqualXMLStructure(DOMElement $expectedElement, DOMElement $actualElement, bool $checkAttributes, string $message): void";s:9:"startLine";i:2441;s:7:"endLine";i:2444;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\assertThat";a:7:{s:4:"name";s:10:"assertThat";s:14:"namespacedName";s:28:"PHPUnit\Framework\assertThat";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:94:"assertThat($value, PHPUnit\Framework\Constraint\Constraint $constraint, string $message): void";s:9:"startLine";i:2458;s:7:"endLine";i:2461;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\assertJson";a:7:{s:4:"name";s:10:"assertJson";s:14:"namespacedName";s:28:"PHPUnit\Framework\assertJson";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:53:"assertJson(string $actualJson, string $message): void";s:9:"startLine";i:2475;s:7:"endLine";i:2478;s:3:"ccn";i:1;}s:50:"PHPUnit\Framework\assertJsonStringEqualsJsonString";a:7:{s:4:"name";s:32:"assertJsonStringEqualsJsonString";s:14:"namespacedName";s:50:"PHPUnit\Framework\assertJsonStringEqualsJsonString";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:97:"assertJsonStringEqualsJsonString(string $expectedJson, string $actualJson, string $message): void";s:9:"startLine";i:2492;s:7:"endLine";i:2495;s:3:"ccn";i:1;}s:53:"PHPUnit\Framework\assertJsonStringNotEqualsJsonString";a:7:{s:4:"name";s:35:"assertJsonStringNotEqualsJsonString";s:14:"namespacedName";s:53:"PHPUnit\Framework\assertJsonStringNotEqualsJsonString";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:86:"assertJsonStringNotEqualsJsonString($expectedJson, $actualJson, string $message): void";s:9:"startLine";i:2512;s:7:"endLine";i:2515;s:3:"ccn";i:1;}s:48:"PHPUnit\Framework\assertJsonStringEqualsJsonFile";a:7:{s:4:"name";s:30:"assertJsonStringEqualsJsonFile";s:14:"namespacedName";s:48:"PHPUnit\Framework\assertJsonStringEqualsJsonFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:95:"assertJsonStringEqualsJsonFile(string $expectedFile, string $actualJson, string $message): void";s:9:"startLine";i:2529;s:7:"endLine";i:2532;s:3:"ccn";i:1;}s:51:"PHPUnit\Framework\assertJsonStringNotEqualsJsonFile";a:7:{s:4:"name";s:33:"assertJsonStringNotEqualsJsonFile";s:14:"namespacedName";s:51:"PHPUnit\Framework\assertJsonStringNotEqualsJsonFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:98:"assertJsonStringNotEqualsJsonFile(string $expectedFile, string $actualJson, string $message): void";s:9:"startLine";i:2546;s:7:"endLine";i:2549;s:3:"ccn";i:1;}s:46:"PHPUnit\Framework\assertJsonFileEqualsJsonFile";a:7:{s:4:"name";s:28:"assertJsonFileEqualsJsonFile";s:14:"namespacedName";s:46:"PHPUnit\Framework\assertJsonFileEqualsJsonFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:93:"assertJsonFileEqualsJsonFile(string $expectedFile, string $actualFile, string $message): void";s:9:"startLine";i:2563;s:7:"endLine";i:2566;s:3:"ccn";i:1;}s:49:"PHPUnit\Framework\assertJsonFileNotEqualsJsonFile";a:7:{s:4:"name";s:31:"assertJsonFileNotEqualsJsonFile";s:14:"namespacedName";s:49:"PHPUnit\Framework\assertJsonFileNotEqualsJsonFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:96:"assertJsonFileNotEqualsJsonFile(string $expectedFile, string $actualFile, string $message): void";s:9:"startLine";i:2580;s:7:"endLine";i:2583;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\logicalAnd";a:7:{s:4:"name";s:10:"logicalAnd";s:14:"namespacedName";s:28:"PHPUnit\Framework\logicalAnd";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:53:"logicalAnd(): PHPUnit\Framework\Constraint\LogicalAnd";s:9:"startLine";i:2587;s:7:"endLine";i:2590;s:3:"ccn";i:1;}s:27:"PHPUnit\Framework\logicalOr";a:7:{s:4:"name";s:9:"logicalOr";s:14:"namespacedName";s:27:"PHPUnit\Framework\logicalOr";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:51:"logicalOr(): PHPUnit\Framework\Constraint\LogicalOr";s:9:"startLine";i:2594;s:7:"endLine";i:2597;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\logicalNot";a:7:{s:4:"name";s:10:"logicalNot";s:14:"namespacedName";s:28:"PHPUnit\Framework\logicalNot";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:104:"logicalNot(PHPUnit\Framework\Constraint\Constraint $constraint): PHPUnit\Framework\Constraint\LogicalNot";s:9:"startLine";i:2601;s:7:"endLine";i:2604;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\logicalXor";a:7:{s:4:"name";s:10:"logicalXor";s:14:"namespacedName";s:28:"PHPUnit\Framework\logicalXor";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:53:"logicalXor(): PHPUnit\Framework\Constraint\LogicalXor";s:9:"startLine";i:2608;s:7:"endLine";i:2611;s:3:"ccn";i:1;}s:26:"PHPUnit\Framework\anything";a:7:{s:4:"name";s:8:"anything";s:14:"namespacedName";s:26:"PHPUnit\Framework\anything";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:51:"anything(): PHPUnit\Framework\Constraint\IsAnything";s:9:"startLine";i:2615;s:7:"endLine";i:2618;s:3:"ccn";i:1;}s:24:"PHPUnit\Framework\isTrue";a:7:{s:4:"name";s:6:"isTrue";s:14:"namespacedName";s:24:"PHPUnit\Framework\isTrue";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:45:"isTrue(): PHPUnit\Framework\Constraint\IsTrue";s:9:"startLine";i:2622;s:7:"endLine";i:2625;s:3:"ccn";i:1;}s:26:"PHPUnit\Framework\callback";a:7:{s:4:"name";s:8:"callback";s:14:"namespacedName";s:26:"PHPUnit\Framework\callback";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:67:"callback(callable $callback): PHPUnit\Framework\Constraint\Callback";s:9:"startLine";i:2629;s:7:"endLine";i:2632;s:3:"ccn";i:1;}s:25:"PHPUnit\Framework\isFalse";a:7:{s:4:"name";s:7:"isFalse";s:14:"namespacedName";s:25:"PHPUnit\Framework\isFalse";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:47:"isFalse(): PHPUnit\Framework\Constraint\IsFalse";s:9:"startLine";i:2636;s:7:"endLine";i:2639;s:3:"ccn";i:1;}s:24:"PHPUnit\Framework\isJson";a:7:{s:4:"name";s:6:"isJson";s:14:"namespacedName";s:24:"PHPUnit\Framework\isJson";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:45:"isJson(): PHPUnit\Framework\Constraint\IsJson";s:9:"startLine";i:2643;s:7:"endLine";i:2646;s:3:"ccn";i:1;}s:24:"PHPUnit\Framework\isNull";a:7:{s:4:"name";s:6:"isNull";s:14:"namespacedName";s:24:"PHPUnit\Framework\isNull";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:45:"isNull(): PHPUnit\Framework\Constraint\IsNull";s:9:"startLine";i:2650;s:7:"endLine";i:2653;s:3:"ccn";i:1;}s:26:"PHPUnit\Framework\isFinite";a:7:{s:4:"name";s:8:"isFinite";s:14:"namespacedName";s:26:"PHPUnit\Framework\isFinite";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:49:"isFinite(): PHPUnit\Framework\Constraint\IsFinite";s:9:"startLine";i:2657;s:7:"endLine";i:2660;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\isInfinite";a:7:{s:4:"name";s:10:"isInfinite";s:14:"namespacedName";s:28:"PHPUnit\Framework\isInfinite";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:53:"isInfinite(): PHPUnit\Framework\Constraint\IsInfinite";s:9:"startLine";i:2664;s:7:"endLine";i:2667;s:3:"ccn";i:1;}s:23:"PHPUnit\Framework\isNan";a:7:{s:4:"name";s:5:"isNan";s:14:"namespacedName";s:23:"PHPUnit\Framework\isNan";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:43:"isNan(): PHPUnit\Framework\Constraint\IsNan";s:9:"startLine";i:2671;s:7:"endLine";i:2674;s:3:"ccn";i:1;}s:31:"PHPUnit\Framework\containsEqual";a:7:{s:4:"name";s:13:"containsEqual";s:14:"namespacedName";s:31:"PHPUnit\Framework\containsEqual";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:76:"containsEqual($value): PHPUnit\Framework\Constraint\TraversableContainsEqual";s:9:"startLine";i:2678;s:7:"endLine";i:2681;s:3:"ccn";i:1;}s:35:"PHPUnit\Framework\containsIdentical";a:7:{s:4:"name";s:17:"containsIdentical";s:14:"namespacedName";s:35:"PHPUnit\Framework\containsIdentical";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:84:"containsIdentical($value): PHPUnit\Framework\Constraint\TraversableContainsIdentical";s:9:"startLine";i:2685;s:7:"endLine";i:2688;s:3:"ccn";i:1;}s:30:"PHPUnit\Framework\containsOnly";a:7:{s:4:"name";s:12:"containsOnly";s:14:"namespacedName";s:30:"PHPUnit\Framework\containsOnly";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:80:"containsOnly(string $type): PHPUnit\Framework\Constraint\TraversableContainsOnly";s:9:"startLine";i:2692;s:7:"endLine";i:2695;s:3:"ccn";i:1;}s:41:"PHPUnit\Framework\containsOnlyInstancesOf";a:7:{s:4:"name";s:23:"containsOnlyInstancesOf";s:14:"namespacedName";s:41:"PHPUnit\Framework\containsOnlyInstancesOf";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:96:"containsOnlyInstancesOf(string $className): PHPUnit\Framework\Constraint\TraversableContainsOnly";s:9:"startLine";i:2699;s:7:"endLine";i:2702;s:3:"ccn";i:1;}s:29:"PHPUnit\Framework\arrayHasKey";a:7:{s:4:"name";s:11:"arrayHasKey";s:14:"namespacedName";s:29:"PHPUnit\Framework\arrayHasKey";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:59:"arrayHasKey($key): PHPUnit\Framework\Constraint\ArrayHasKey";s:9:"startLine";i:2706;s:7:"endLine";i:2709;s:3:"ccn";i:1;}s:25:"PHPUnit\Framework\equalTo";a:7:{s:4:"name";s:7:"equalTo";s:14:"namespacedName";s:25:"PHPUnit\Framework\equalTo";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:53:"equalTo($value): PHPUnit\Framework\Constraint\IsEqual";s:9:"startLine";i:2713;s:7:"endLine";i:2716;s:3:"ccn";i:1;}s:39:"PHPUnit\Framework\equalToCanonicalizing";a:7:{s:4:"name";s:21:"equalToCanonicalizing";s:14:"namespacedName";s:39:"PHPUnit\Framework\equalToCanonicalizing";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:81:"equalToCanonicalizing($value): PHPUnit\Framework\Constraint\IsEqualCanonicalizing";s:9:"startLine";i:2720;s:7:"endLine";i:2723;s:3:"ccn";i:1;}s:37:"PHPUnit\Framework\equalToIgnoringCase";a:7:{s:4:"name";s:19:"equalToIgnoringCase";s:14:"namespacedName";s:37:"PHPUnit\Framework\equalToIgnoringCase";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:77:"equalToIgnoringCase($value): PHPUnit\Framework\Constraint\IsEqualIgnoringCase";s:9:"startLine";i:2727;s:7:"endLine";i:2730;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\equalToWithDelta";a:7:{s:4:"name";s:16:"equalToWithDelta";s:14:"namespacedName";s:34:"PHPUnit\Framework\equalToWithDelta";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:85:"equalToWithDelta($value, float $delta): PHPUnit\Framework\Constraint\IsEqualWithDelta";s:9:"startLine";i:2734;s:7:"endLine";i:2737;s:3:"ccn";i:1;}s:25:"PHPUnit\Framework\isEmpty";a:7:{s:4:"name";s:7:"isEmpty";s:14:"namespacedName";s:25:"PHPUnit\Framework\isEmpty";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:47:"isEmpty(): PHPUnit\Framework\Constraint\IsEmpty";s:9:"startLine";i:2741;s:7:"endLine";i:2744;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\isWritable";a:7:{s:4:"name";s:10:"isWritable";s:14:"namespacedName";s:28:"PHPUnit\Framework\isWritable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:53:"isWritable(): PHPUnit\Framework\Constraint\IsWritable";s:9:"startLine";i:2748;s:7:"endLine";i:2751;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\isReadable";a:7:{s:4:"name";s:10:"isReadable";s:14:"namespacedName";s:28:"PHPUnit\Framework\isReadable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:53:"isReadable(): PHPUnit\Framework\Constraint\IsReadable";s:9:"startLine";i:2755;s:7:"endLine";i:2758;s:3:"ccn";i:1;}s:33:"PHPUnit\Framework\directoryExists";a:7:{s:4:"name";s:15:"directoryExists";s:14:"namespacedName";s:33:"PHPUnit\Framework\directoryExists";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:63:"directoryExists(): PHPUnit\Framework\Constraint\DirectoryExists";s:9:"startLine";i:2762;s:7:"endLine";i:2765;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\fileExists";a:7:{s:4:"name";s:10:"fileExists";s:14:"namespacedName";s:28:"PHPUnit\Framework\fileExists";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:53:"fileExists(): PHPUnit\Framework\Constraint\FileExists";s:9:"startLine";i:2769;s:7:"endLine";i:2772;s:3:"ccn";i:1;}s:29:"PHPUnit\Framework\greaterThan";a:7:{s:4:"name";s:11:"greaterThan";s:14:"namespacedName";s:29:"PHPUnit\Framework\greaterThan";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:61:"greaterThan($value): PHPUnit\Framework\Constraint\GreaterThan";s:9:"startLine";i:2776;s:7:"endLine";i:2779;s:3:"ccn";i:1;}s:36:"PHPUnit\Framework\greaterThanOrEqual";a:7:{s:4:"name";s:18:"greaterThanOrEqual";s:14:"namespacedName";s:36:"PHPUnit\Framework\greaterThanOrEqual";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:66:"greaterThanOrEqual($value): PHPUnit\Framework\Constraint\LogicalOr";s:9:"startLine";i:2783;s:7:"endLine";i:2786;s:3:"ccn";i:1;}s:35:"PHPUnit\Framework\classHasAttribute";a:7:{s:4:"name";s:17:"classHasAttribute";s:14:"namespacedName";s:35:"PHPUnit\Framework\classHasAttribute";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:88:"classHasAttribute(string $attributeName): PHPUnit\Framework\Constraint\ClassHasAttribute";s:9:"startLine";i:2790;s:7:"endLine";i:2793;s:3:"ccn";i:1;}s:41:"PHPUnit\Framework\classHasStaticAttribute";a:7:{s:4:"name";s:23:"classHasStaticAttribute";s:14:"namespacedName";s:41:"PHPUnit\Framework\classHasStaticAttribute";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:100:"classHasStaticAttribute(string $attributeName): PHPUnit\Framework\Constraint\ClassHasStaticAttribute";s:9:"startLine";i:2797;s:7:"endLine";i:2800;s:3:"ccn";i:1;}s:36:"PHPUnit\Framework\objectHasAttribute";a:7:{s:4:"name";s:18:"objectHasAttribute";s:14:"namespacedName";s:36:"PHPUnit\Framework\objectHasAttribute";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:83:"objectHasAttribute($attributeName): PHPUnit\Framework\Constraint\ObjectHasAttribute";s:9:"startLine";i:2804;s:7:"endLine";i:2807;s:3:"ccn";i:1;}s:29:"PHPUnit\Framework\identicalTo";a:7:{s:4:"name";s:11:"identicalTo";s:14:"namespacedName";s:29:"PHPUnit\Framework\identicalTo";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:61:"identicalTo($value): PHPUnit\Framework\Constraint\IsIdentical";s:9:"startLine";i:2811;s:7:"endLine";i:2814;s:3:"ccn";i:1;}s:30:"PHPUnit\Framework\isInstanceOf";a:7:{s:4:"name";s:12:"isInstanceOf";s:14:"namespacedName";s:30:"PHPUnit\Framework\isInstanceOf";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:74:"isInstanceOf(string $className): PHPUnit\Framework\Constraint\IsInstanceOf";s:9:"startLine";i:2818;s:7:"endLine";i:2821;s:3:"ccn";i:1;}s:24:"PHPUnit\Framework\isType";a:7:{s:4:"name";s:6:"isType";s:14:"namespacedName";s:24:"PHPUnit\Framework\isType";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:57:"isType(string $type): PHPUnit\Framework\Constraint\IsType";s:9:"startLine";i:2825;s:7:"endLine";i:2828;s:3:"ccn";i:1;}s:26:"PHPUnit\Framework\lessThan";a:7:{s:4:"name";s:8:"lessThan";s:14:"namespacedName";s:26:"PHPUnit\Framework\lessThan";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:55:"lessThan($value): PHPUnit\Framework\Constraint\LessThan";s:9:"startLine";i:2832;s:7:"endLine";i:2835;s:3:"ccn";i:1;}s:33:"PHPUnit\Framework\lessThanOrEqual";a:7:{s:4:"name";s:15:"lessThanOrEqual";s:14:"namespacedName";s:33:"PHPUnit\Framework\lessThanOrEqual";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:63:"lessThanOrEqual($value): PHPUnit\Framework\Constraint\LogicalOr";s:9:"startLine";i:2839;s:7:"endLine";i:2842;s:3:"ccn";i:1;}s:42:"PHPUnit\Framework\matchesRegularExpression";a:7:{s:4:"name";s:24:"matchesRegularExpression";s:14:"namespacedName";s:42:"PHPUnit\Framework\matchesRegularExpression";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:89:"matchesRegularExpression(string $pattern): PHPUnit\Framework\Constraint\RegularExpression";s:9:"startLine";i:2846;s:7:"endLine";i:2849;s:3:"ccn";i:1;}s:25:"PHPUnit\Framework\matches";a:7:{s:4:"name";s:7:"matches";s:14:"namespacedName";s:25:"PHPUnit\Framework\matches";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:84:"matches(string $string): PHPUnit\Framework\Constraint\StringMatchesFormatDescription";s:9:"startLine";i:2853;s:7:"endLine";i:2856;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\stringStartsWith";a:7:{s:4:"name";s:16:"stringStartsWith";s:14:"namespacedName";s:34:"PHPUnit\Framework\stringStartsWith";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:72:"stringStartsWith($prefix): PHPUnit\Framework\Constraint\StringStartsWith";s:9:"startLine";i:2860;s:7:"endLine";i:2863;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\stringContains";a:7:{s:4:"name";s:14:"stringContains";s:14:"namespacedName";s:32:"PHPUnit\Framework\stringContains";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:87:"stringContains(string $string, bool $case): PHPUnit\Framework\Constraint\StringContains";s:9:"startLine";i:2867;s:7:"endLine";i:2870;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\stringEndsWith";a:7:{s:4:"name";s:14:"stringEndsWith";s:14:"namespacedName";s:32:"PHPUnit\Framework\stringEndsWith";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:75:"stringEndsWith(string $suffix): PHPUnit\Framework\Constraint\StringEndsWith";s:9:"startLine";i:2874;s:7:"endLine";i:2877;s:3:"ccn";i:1;}s:25:"PHPUnit\Framework\countOf";a:7:{s:4:"name";s:7:"countOf";s:14:"namespacedName";s:25:"PHPUnit\Framework\countOf";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:55:"countOf(int $count): PHPUnit\Framework\Constraint\Count";s:9:"startLine";i:2881;s:7:"endLine";i:2884;s:3:"ccn";i:1;}s:30:"PHPUnit\Framework\objectEquals";a:7:{s:4:"name";s:12:"objectEquals";s:14:"namespacedName";s:30:"PHPUnit\Framework\objectEquals";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:87:"objectEquals(object $object, string $method): PHPUnit\Framework\Constraint\ObjectEquals";s:9:"startLine";i:2888;s:7:"endLine";i:2891;s:3:"ccn";i:1;}s:21:"PHPUnit\Framework\any";a:7:{s:4:"name";s:3:"any";s:14:"namespacedName";s:21:"PHPUnit\Framework\any";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:56:"any(): PHPUnit\Framework\MockObject\Rule\AnyInvokedCount";s:9:"startLine";i:2899;s:7:"endLine";i:2902;s:3:"ccn";i:1;}s:23:"PHPUnit\Framework\never";a:7:{s:4:"name";s:5:"never";s:14:"namespacedName";s:23:"PHPUnit\Framework\never";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:55:"never(): PHPUnit\Framework\MockObject\Rule\InvokedCount";s:9:"startLine";i:2909;s:7:"endLine";i:2912;s:3:"ccn";i:1;}s:25:"PHPUnit\Framework\atLeast";a:7:{s:4:"name";s:7:"atLeast";s:14:"namespacedName";s:25:"PHPUnit\Framework\atLeast";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:88:"atLeast(int $requiredInvocations): PHPUnit\Framework\MockObject\Rule\InvokedAtLeastCount";s:9:"startLine";i:2920;s:7:"endLine";i:2925;s:3:"ccn";i:1;}s:29:"PHPUnit\Framework\atLeastOnce";a:7:{s:4:"name";s:11:"atLeastOnce";s:14:"namespacedName";s:29:"PHPUnit\Framework\atLeastOnce";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:67:"atLeastOnce(): PHPUnit\Framework\MockObject\Rule\InvokedAtLeastOnce";s:9:"startLine";i:2932;s:7:"endLine";i:2935;s:3:"ccn";i:1;}s:22:"PHPUnit\Framework\once";a:7:{s:4:"name";s:4:"once";s:14:"namespacedName";s:22:"PHPUnit\Framework\once";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:54:"once(): PHPUnit\Framework\MockObject\Rule\InvokedCount";s:9:"startLine";i:2942;s:7:"endLine";i:2945;s:3:"ccn";i:1;}s:25:"PHPUnit\Framework\exactly";a:7:{s:4:"name";s:7:"exactly";s:14:"namespacedName";s:25:"PHPUnit\Framework\exactly";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:67:"exactly(int $count): PHPUnit\Framework\MockObject\Rule\InvokedCount";s:9:"startLine";i:2953;s:7:"endLine";i:2956;s:3:"ccn";i:1;}s:24:"PHPUnit\Framework\atMost";a:7:{s:4:"name";s:6:"atMost";s:14:"namespacedName";s:24:"PHPUnit\Framework\atMost";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:85:"atMost(int $allowedInvocations): PHPUnit\Framework\MockObject\Rule\InvokedAtMostCount";s:9:"startLine";i:2964;s:7:"endLine";i:2967;s:3:"ccn";i:1;}s:20:"PHPUnit\Framework\at";a:7:{s:4:"name";s:2:"at";s:14:"namespacedName";s:20:"PHPUnit\Framework\at";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:64:"at(int $index): PHPUnit\Framework\MockObject\Rule\InvokedAtIndex";s:9:"startLine";i:2975;s:7:"endLine";i:2978;s:3:"ccn";i:1;}s:29:"PHPUnit\Framework\returnValue";a:7:{s:4:"name";s:11:"returnValue";s:14:"namespacedName";s:29:"PHPUnit\Framework\returnValue";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:65:"returnValue($value): PHPUnit\Framework\MockObject\Stub\ReturnStub";s:9:"startLine";i:2982;s:7:"endLine";i:2985;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\returnValueMap";a:7:{s:4:"name";s:14:"returnValueMap";s:14:"namespacedName";s:32:"PHPUnit\Framework\returnValueMap";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:81:"returnValueMap(array $valueMap): PHPUnit\Framework\MockObject\Stub\ReturnValueMap";s:9:"startLine";i:2989;s:7:"endLine";i:2992;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\returnArgument";a:7:{s:4:"name";s:14:"returnArgument";s:14:"namespacedName";s:32:"PHPUnit\Framework\returnArgument";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:84:"returnArgument(int $argumentIndex): PHPUnit\Framework\MockObject\Stub\ReturnArgument";s:9:"startLine";i:2996;s:7:"endLine";i:2999;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\returnCallback";a:7:{s:4:"name";s:14:"returnCallback";s:14:"namespacedName";s:32:"PHPUnit\Framework\returnCallback";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:75:"returnCallback($callback): PHPUnit\Framework\MockObject\Stub\ReturnCallback";s:9:"startLine";i:3003;s:7:"endLine";i:3006;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\returnSelf";a:7:{s:4:"name";s:10:"returnSelf";s:14:"namespacedName";s:28:"PHPUnit\Framework\returnSelf";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:58:"returnSelf(): PHPUnit\Framework\MockObject\Stub\ReturnSelf";s:9:"startLine";i:3015;s:7:"endLine";i:3018;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\throwException";a:7:{s:4:"name";s:14:"throwException";s:14:"namespacedName";s:32:"PHPUnit\Framework\throwException";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:81:"throwException(Throwable $exception): PHPUnit\Framework\MockObject\Stub\Exception";s:9:"startLine";i:3022;s:7:"endLine";i:3025;s:3:"ccn";i:1;}s:36:"PHPUnit\Framework\onConsecutiveCalls";a:7:{s:4:"name";s:18:"onConsecutiveCalls";s:14:"namespacedName";s:36:"PHPUnit\Framework\onConsecutiveCalls";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:72:"onConsecutiveCalls(): PHPUnit\Framework\MockObject\Stub\ConsecutiveCalls";s:9:"startLine";i:3029;s:7:"endLine";i:3034;s:3:"ccn";i:1;}}s:14:"linesOfCodeFor";O:41:"SebastianBergmann\LinesOfCode\LinesOfCode":4:{s:54:" SebastianBergmann\LinesOfCode\LinesOfCode linesOfCode";i:3035;s:61:" SebastianBergmann\LinesOfCode\LinesOfCode commentLinesOfCode";i:1588;s:64:" SebastianBergmann\LinesOfCode\LinesOfCode nonCommentLinesOfCode";i:1447;s:61:" SebastianBergmann\LinesOfCode\LinesOfCode logicalLinesOfCode";i:286;}s:15:"ignoredLinesFor";a:44:{i:0;i:778;i:1;i:779;i:2;i:780;i:3;i:781;i:4;i:833;i:5;i:834;i:6;i:835;i:7;i:836;i:8;i:888;i:9;i:889;i:10;i:890;i:11;i:891;i:12;i:943;i:13;i:944;i:14;i:945;i:15;i:946;i:16;i:998;i:17;i:999;i:18;i:1000;i:19;i:1001;i:20;i:1053;i:21;i:1054;i:22;i:1055;i:23;i:1056;i:24;i:1108;i:25;i:1109;i:26;i:1110;i:27;i:1111;i:28;i:1163;i:29;i:1164;i:30;i:1165;i:31;i:1166;i:32;i:2020;i:33;i:2021;i:34;i:2022;i:35;i:2023;i:36;i:2058;i:37;i:2059;i:38;i:2060;i:39;i:2061;i:40;i:2441;i:41;i:2442;i:42;i:2443;i:43;i:2444;}}